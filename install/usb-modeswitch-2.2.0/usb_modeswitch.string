#define RAW "set arg0 [lindex $argv 0]\nif [regexp {\\.tcl$} $arg0] {\nif [file exists $arg0] {\nset argv [lrange $argv 1 end]\nsource $arg0\nexit\n}\n}\nset flags(logging) 0\nset flags(noswitching) 0\nset flags(stordelay) 0\nproc {Main} {argv argc} {\nglobal scsi usb config match device flags setup devdir loginit\nset flags(config) \"\"\nset flags(logwrite) 0\nLog \"[ParseGlobalConfig]\"\nif {[lindex $argv 0] == \"--symlink-name\"} {\nputs -nonewline [SymLinkName [lindex $argv 1]]\nSafeExit\n}\nif {[lindex $argv 0] == \"--switch-systemd\"} {\nset device [string trim [lindex $argv 1] \"/-\"]\nset device [regsub {/} $device \"-\"]\nset argList [list \"\" $device]\nLog \"\\nStarted via systemd\"\n} else {\nif {[lindex $argv 0] == \"--switch-upstart\"} {\nLog \"\\nStarted via upstart\"\n}\nset argList [split [lindex $argv 1] /]\nif [string length [lindex $argList 1]] {\nset device [lindex $argList 1]\n} else {\nset device \"noname\"\n}\n}\nif {$flags(stordelay) > 0} {\nSetStorageDelay $flags(stordelay)\n}\nLog \"Raw args from udev: [lindex $argv 1]\\n\"\nif {$device == \"noname\"} {\nLog \"\\nNo data from udev. Exit\"\nSafeExit\n}\nif {![regexp -- {--switch-} [lindex $argv 0]]} {\nLog \"\\nNo command given. Exit\"\nSafeExit\n}\nset setup(dbdir) /usr/share/usb_modeswitch\nset setup(dbdir_etc) /etc/usb_modeswitch.d\nif {![file exists $setup(dbdir)] && ![file exists $setup(dbdir_etc)]} {\nLog \"\\nError: no config database found in /usr/share or /etc. Exit\"\nSafeExit\n}\nset bindir /usr/sbin\nset devList1 {}\nset devList2 {}\nset ifChk 0\nif {[string length [lindex $argList 0]] == 0} {\nif {[string length [lindex $argList 1]] == 0} {\nLog \"No device number values given from udev! Exit\"\nSafeExit\n} else {\nif {![regexp {(.*?):} [lindex $argList 1] d dev_top]} {\nif [regexp {([0-9]+-[0-9]+\\.?[0-9]*.*)} [lindex $argList 1] d dev_top] {\nset ifChk 1\n} else {\nLog \"Could not determine device dir from udev values! Exit\"\nSafeExit\n}\n}\n}\n} else {\nset dev_top [lindex $argList 0]\nregexp {(.*?):} $dev_top d dev_top\n}\nset devdir /sys/bus/usb/devices/$dev_top\nif {![file isdirectory $devdir]} {\nLog \"Top device directory not found ($devdir)! Exit\"\nSafeExit\n}\nLog \"Use top device dir $devdir\"\nset iface 0\nif $ifChk {\nLog \"Check class of first interface ...\"\nset config(class) [IfClass 0]\nif {$iface < 0} {\nLog \" No access to interface 0. Exit\"\nSafeExit\n}\nLog \" Interface class is $config(class).\"\nif {$config(class) == \"08\" || $config(class) == \"03\"} {\n} else {\nLog \"No install mode found. Aborting\"\nexit\n}\n}\nset ifdir [file tail [IfDir $iface]]\nregexp {:([0-9]+\\.[0-9]+)$} $ifdir d iface\nset flags(logwrite) 1\nset match(sVe) scsi(vendor)\nset match(sMo) scsi(model)\nset match(sRe) scsi(rev)\nset match(uMa) usb(manufacturer)\nset match(uPr) usb(product)\nset match(uSe) usb(serial)\nif {![ReadUSBAttrs $devdir]} {\nLog \"USB attributes not found in sysfs tree. Exit\"\nSafeExit\n}\nset config(vendor) $usb(idVendor)\nset config(product) $usb(idProduct)\nif $flags(logging) {\nLog \"\\n----------------\\nUSB values from sysfs:\"\nforeach attr {manufacturer product serial} {\nLog \"  $attr\\t$usb($attr)\"\n}\nLog \"----------------\"\n}\nif $flags(noswitching) {\nSysLog \"usb_modeswitch: switching disabled, no action for $usb(idVendor):$usb(idProduct)\"\nLog \"\\nSwitching globally disabled. Exit\"\nSafeExit\n}\nif {$usb(bNumConfigurations) == \"1\"} {\nset configParam \"-u -1\"\nLog \"bNumConfigurations is 1 - don't check for active configuration\"\n} else {\nset configParam \"\"\n}\nset flags(os) \"linux\"\nif {$usb(idVendor) == \"12d1\" && [regexp -nocase {android} [exec cat /proc/version]]} {\nset flags(os) \"android\"\n}\nif {$flags(os) == \"android\"} {\nset configList [ConfigGet conflist $usb(idVendor):#android]\n} else {\nset configList [ConfigGet conflist $usb(idVendor):$usb(idProduct)]\n}\nif {[llength $configList] == 0} {\nLog \"Aargh! Config file missing for $usb(idVendor):$usb(idProduct)! Exit\"\nSafeExit\n}\nLog \"ConfigList: $configList\"\nset scsiNeeded 0\nif {[llength $configList] > 1} {\nif [regexp {:s} $configList] {\nset scsiNeeded 1\n}\n}\nif $scsiNeeded {\nif [ReadSCSIAttrs $devdir:$iface] {\nLog \"----------------\\nSCSI values from sysfs:\"\nforeach attr {vendor model rev} {\nLog \" $attr\\t$scsi($attr)\"\n}\nLog \"----------------\"\n} else {\nLog \"Could not get SCSI attributes, exclude devices with SCSI match\"\n}\n} else {\nLog \"SCSI attributes not needed, move on\"\n}\nafter 500\nset report {}\nforeach mconfig $configList {\nif [regexp {\\.(dpkg|rpm)} $mconfig] {continue}\nLog \"Check config: $mconfig\"\nif [MatchDevice $mconfig] {\nLog \"! matched. Read config data\"\nset flags(config) $mconfig\nif [string length $usb(busnum)] {\nset busParam \"-b [string trimleft $usb(busnum) 0]\"\nset devParam \"-g [string trimleft $usb(devnum) 0]\"\n} else {\nset busParam \"\"\nset devParam \"\"\n}\nset configBuffer [ConfigGet conffile $mconfig]\nParseDeviceConfig $configBuffer\nif [regexp -nocase {/[0-9a-f]+:#} $flags(config)] {\nLog \"Note: Using generic manufacturer configuration for \\\"$flags(os)\\\"\"\n}\nif {$config(waitBefore) != \"\"} {\nLog \"Delay time of $config(waitBefore) seconds\"\nappend config(waitBefore) \"000\"\nafter $config(waitBefore)\nLog \" wait is over, start mode switch\"\n}\nif {$config(noMBIMCheck)==0 && $usb(bNumConfigurations) > 1} {\nLog \"Device may have an MBIM configuration, check driver ...\"\nif [CheckMBIM] {\nLog \" driver for MBIM devices is available\"\nLog \"Find MBIM configuration number ...\"\nif [catch {set cfgno [exec /usr/sbin/usb_modeswitch -j -Q $busParam $devParam -v $usb(idVendor) -p $usb(idProduct)]} err] {\nLog \"Error when trying to find MBIM configuration, switch to legacy modem mode\"\n} else {\nset cfgno [string trim $cfgno]\nif {$cfgno > 0} {\nset config(Configuration) $cfgno\nset config(driverModule) \"\"\nset configBuffer \"Configuration=$cfgno\"\n} else {\nLog \" No MBIM configuration found, switch to legacy modem mode\"\n}\n}\n} else {\nLog \" no MBIM driver found, switch to legacy modem mode\"\n}\n}\nif $flags(logging) {\nLog \"Command to be run:\\nusb_modeswitch -W -D -s 20 $configParam $busParam $devParam -v $usb(idVendor) -p $usb(idProduct) -f \\$configBuffer\"\nset report [exec /usr/sbin/usb_modeswitch -W -D -s 20 $configParam $busParam $devParam -v $usb(idVendor) -p $usb(idProduct) -f \"$configBuffer\" 2>@1]\nLog \"\\nVerbose debug output of usb_modeswitch and libusb follows\"\nLog \"(Note that some USB errors are to be expected in the process)\"\nLog \"--------------------------------\"\nLog $report\nLog \"--------------------------------\"\nLog \"(end of usb_modeswitch output)\\n\"\n} else {\nset report [exec /usr/sbin/usb_modeswitch -Q -D -s 20 $configParam $busParam $devParam -v $usb(idVendor) -p $usb(idProduct) -f \"$configBuffer\" 2>@1]\n}\nbreak\n} else {\nLog \"* no match, don't use this config\"\n}\n}\nif [regexp {ok:busdev} $report] {\nif [CheckSuccess $devdir] {\nLog \"Mode switching was successful, found $usb(idVendor):$usb(idProduct) ($usb(manufacturer): $usb(product))\"\nSysLog \"usb_modeswitch: switched to $usb(idVendor):$usb(idProduct) on [format %03d $usb(busnum)]/[format %03d $usb(devnum)]\"\n} else {\nLog \"\\nTarget config not matching - current values are\"\nLogAttributes\nLog \"\\nMode switching may have failed. Exit\"\nSafeExit\n}\n} else {\nif {![file isdirectory $devdir]} {\nLog \"Device directory in sysfs is gone! Something went wrong, abort\"\nSafeExit\n}\nif {![regexp {ok:} $report]} {\nLog \"\\nCore program reported switching failure. Exit\"\nSafeExit\n}\nif {![file exists $devdir/idProduct]} {\nafter 1000\n}\nReadUSBAttrs $devdir $ifdir\n}\nif {$config(driverModule) != \"\" && $usb($ifdir/bInterfaceClass) != \"\" && [regexp {ok:} $report]} {\nif {$usb($ifdir/bInterfaceClass) != \"ff\"} {\nset config(driverModule) \"\"\nLog \" No vendor-specific class found, skip driver check\"\n}\n}\nif {$config(driverModule) != \"\"} {\nif {[string length \"$usb(idVendor)$usb(idProduct)\"] < 8} {\nif {![regexp {ok:(\\w{4}):(\\w{4})} $report d usb(idVendor) usb(idProduct)]} {\nLog \"No target vendor/product ID found or given, can't continue. Abort\"\nSafeExit\n}\n}\nafter 1000\nLog \"Now check for bound driver ...\"\nif {![file exists $devdir/$ifdir/driver]} {\nLog \" no driver has bound to interface 0 yet\"\nAddToList link_list $usb(idVendor):$usb(idProduct)\nif {[InBindList $usb(idVendor):$usb(idProduct)] == 0} {\nLog \"Device is not in \\\"bind_list\\\" yet, bind it now\"\nCheckDriverBind $usb(idVendor) $usb(idProduct)\nset counter 0\nwhile {![file exists $devdir/$ifdir/driver]} {\nif {$counter == 14} {break}\nafter 500\nincr counter\n}\nif {$counter == 14} {\nLog \" driver binding failed\"\n} else {\nLog \" driver was bound to the device\"\nAddToList bind_list $usb(idVendor):$usb(idProduct)\n}\n}\n} else {\nLog \" driver has bound, device is known\"\nif {[llength [glob -nocomplain $devdir/$ifdir/ttyUSB*]] > 0} {\nAddToList link_list $usb(idVendor):$usb(idProduct)\n}\n}\n} else {\nRemoveFromBindList $usb(idVendor):$usb(idProduct)\n}\nif [regexp {ok:$} $report] {\nLog \"No driver check or bind for this device\"\n}\nif [regexp {ok:} $report] {\nLog \"Check for AVOID_RESET_QUIRK kernel attribute\"\nif [file exists $devdir/avoid_reset_quirk] {\nif [catch {exec echo \"1\" >$devdir/avoid_reset_quirk 2>/dev/null} err] {\nLog \" Error setting the attribute: $err\"\n} else {\nLog \" AVOID_RESET_QUIRK activated\"\n}\n} else {\nLog \" not present in this kernel\"\n}\n}\nLog \"\\nAll done, exit\\n\"\nSafeExit\n}\nproc {ReadSCSIAttrs} {topdir} {\nglobal scsi\nset counter 0\nset sysdir $topdir\nLog \"Check storage tree in sysfs ...\"\nwhile {$counter < 20} {\nLog \" loop $counter/20\"\nif {![file isdirectory $sysdir]} {\nLog \" sysfs device tree is gone; abort SCSI value check\"\nreturn 0\n}\nif {[set dirList [glob -nocomplain $topdir/host*]] != \"\"} {\nset sysdir [lindex $dirList 0]\nif {[set dirList [glob -nocomplain $sysdir/target*]] != \"\"} {\nset sysdir [lindex $dirList 0]\nregexp {.*target(.*)} $sysdir d subdir\nif {[set dirList [glob -nocomplain $sysdir/$subdir*]] != \"\"} {\nset sysdir [lindex $dirList 0]\nif [file exists $sysdir/vendor] {\nLog \" Storage tree is ready\"\nbreak\n}\n}\n}\n}\nafter 500\nincr counter\n}\nif {$counter == 20} {\nLog \"SCSI tree not found; you may want to check if this path/file exists:\"\nLog \"$sysdir/vendor\\n\"\nreturn 0\n}\nLog \"Read SCSI values ...\"\nforeach attr {vendor model rev} {\nif [file exists $sysdir/$attr] {\nset rc [open $sysdir/$attr r]\nset scsi($attr) [read -nonewline $rc]\nclose $rc\n} else {\nset scsi($attr) \"\"\nLog \"Warning: SCSI attribute \\\"$attr\\\" not found.\"\n}\n}\nreturn 1\n}\nproc {ReadUSBAttrs} {dir args} {\nglobal usb\nset attrList {idVendor idProduct bConfigurationValue manufacturer product serial devnum busnum bNumConfigurations}\nset mandatoryList {idVendor idProduct bNumConfigurations}\nset result 1\nif {$args != \"\"} {\nlappend attrList \"$args/bInterfaceClass\"\nlappend mandatoryList \"$args/bInterfaceClass\"\n}\nforeach attr $attrList {\nif [file exists $dir/$attr] {\nset rc [open $dir/$attr r]\nset usb($attr) [string trim [read -nonewline $rc]]\nclose $rc\n} else {\nset usb($attr) \"\"\nif {[lsearch $mandatoryList $attr] > -1} {\nset result 0\n}\nif {$attr == \"serial\"} {continue}\nLog \"   Warning: USB attribute \\\"$attr\\\" not found\"\n}\n}\nreturn $result\n}\nproc {MatchDevice} {config} {\nglobal scsi usb match\nset devinfo [file tail $config]\nset infoList [split $devinfo :]\nset stringList [lrange $infoList 2 end]\nif {[llength $stringList] == 0} {return 1}\nforeach teststring $stringList {\nif {$teststring == \"?\"} {return 0}\nset tokenList [split $teststring =]\nset id [lindex $tokenList 0]\nset matchstring [lindex $tokenList 1]\nset blankstring \"\"\nregsub -all {_} $matchstring { } blankstring\nLog \"match $match($id)\"\nLog \"  string1 (exact):  $matchstring\"\nLog \"  string2 (blanks): $blankstring\"\nLog \" device string: [set $match($id)]\"\nif {!([string match *$matchstring* [set $match($id)]] || [string match *$blankstring* [set $match($id)]])} {\nreturn 0\n}\n}\nreturn 1\n}\nproc {ParseGlobalConfig} {} {\nglobal flags\nset configFile \"\"\nset places [list /etc/usb_modeswitch.conf /etc/sysconfig/usb_modeswitch /etc/default/usb_modeswitch]\nforeach cfg $places {\nif [file exists $cfg] {\nset configFile $cfg\nbreak\n}\n}\nif {$configFile == \"\"} {return}\nset rc [open $configFile r]\nwhile {![eof $rc]} {\ngets $rc line\nif [regexp {^#} [string trim $line]] {continue}\nif [regexp {DisableSwitching\\s*=\\s*([^\\s]+)} $line d val] {\nif [regexp -nocase {1|yes|true} $val] {\nset flags(noswitching) 1\n}\n}\nif [regexp {EnableLogging\\s*=\\s*([^\\s]+)} $line d val] {\nif [regexp -nocase {1|yes|true} $val] {\nset flags(logging) 1\n}\n}\nif [regexp {SetStorageDelay\\s*=\\s*([^\\s]+)} $line d val] {\nif [regexp {\\d+} $val] {\nset flags(stordelay) $val\n}\n}\n}\nreturn \"Use global config file: $configFile\"\n}\nproc ParseDeviceConfig {configContent} {\nglobal config\nset config(driverModule) \"\"\nset config(driverIDPath) \"\"\nset config(waitBefore) \"\"\nset config(targetVendor) \"\"\nset config(targetProduct) \"\"\nset config(targetClass) \"\"\nset config(Configuration) \"\"\nset config(noMBIMCheck) 0\nset config(checkSuccess) 20\nset loadDriver 1\nif [regexp -line {^[^#]*?TargetVendor.*?=.*?0x(\\w+).*?$} $configContent d config(targetVendor)] {\nLog \"config: TargetVendor set to $config(targetVendor)\"\n}\nif [regexp -line {^[^#]*?TargetProduct.*?=.*?0x(\\w+).*?$} $configContent d config(targetProduct)] {\nLog \"config: TargetProduct set to $config(targetProduct)\"\n}\nif [regexp -line {^[^#]*?TargetProductList.*?=.*?\"([0-9a-fA-F,]+).*?$} $configContent d config(targetProduct)] {\nLog \"config: TargetProductList set to $config(targetProduct)\"\n}\nif [regexp -line {^[^#]*?TargetClass.*?=.*?0x(\\w+).*?$} $configContent d config(targetClass)] {\nLog \"config: TargetClass set to $config(targetClass)\"\n}\nif [regexp -line {^[^#]*?Configuration.*?=.*?([0-9]+).*?$} $configContent d config(Configuration)] {\nLog \"config: Configuration (target) set to $config(Configuration)\"\n}\nif [regexp -line {^[^#]*?DriverModule.*?=.*?(\\w+).*?$} $configContent d config(driverModule)] {\nLog \"config: DriverModule set to $config(driverModule)\"\n}\nif [regexp -line {^[^#]*?DriverIDPath.*?=.*?\"?([/\\-\\w]+).*?$} $configContent d config(driverIDPath)] {\nLog \"config: DriverIDPath set to $config(driverIDPath)\"\n}\nif [regexp -line {^[^#]*?CheckSuccess.*?=.*?([0-9]+).*?$} $configContent d config(checkSuccess)] {\nLog \"config: CheckSuccess set to $config(checkSuccess)\"\n}\nif [regexp -line {^[^#]*?WaitBefore.*?=.*?([0-9]+).*?$} $configContent d config(waitBefore)] {\nLog \"config: WaitBefore set to $config(waitBefore)\"\n}\nif [regexp -line {^[^#]*?NoMBIMCheck.*?=.*?([0-9]+).*?$} $configContent d config(noMBIMCheck)] {\nLog \"config: noMBIMCheck set to $config(noMBIMCheck)\"\n}\nif [regexp -line {^[^#]*?NoDriverLoading.*?=.*?(1|yes|true).*?$} $configContent] {\nset loadDriver 0\nLog \"config: NoDriverLoading is set to active\"\n}\nif $loadDriver {\nif {$config(driverModule) == \"\"} {\nset config(driverModule) \"option\"\nset config(driverIDPath) \"/sys/bus/usb-serial/drivers/option1\"\n} else {\nif {$config(driverIDPath) == \"\"} {\nset config(driverIDPath) \"/sys/bus/usb/drivers/$config(driverModule)\"\n}\n}\nLog \"Driver module is \\\"$config(driverModule)\\\", ID path is $config(driverIDPath)\\n\"\n} else {\nLog \"Driver will not be handled by usb_modeswitch\"\n}\nset config(waitBefore) [string trimleft $config(waitBefore) 0]\n}\nproc ConfigGet {command config} {\nglobal setup usb flags\nswitch $command {\nconflist {\nset configList [lsort -decreasing [glob -nocomplain $setup(dbdir_etc)/$config*]]\nset configList [concat $configList [lsort -decreasing [glob -nocomplain $setup(dbdir)/$config*]]]\neval lappend configList [glob -nocomplain $setup(dbdir)/$usb(idVendor):#$flags(os)]\nif [file exists $setup(dbdir)/configPack.tar.gz] {\nLog \"Found packed config collection $setup(dbdir)/configPack.tar.gz\"\nif [catch {set packedList [exec tar -tzf $setup(dbdir)/configPack.tar.gz 2>/dev/null]} err] {\nLog \"Error: problem opening config package; tar returned\\n $err\"\nreturn {}\n}\nset packedList [split $packedList \\n]\nset packedConfigList [lsort -decreasing [lsearch -glob -all -inline $packedList $config*]]\nlappend packedConfigList [lsearch -inline $packedList $usb(idVendor):#$flags(os)]\nforeach packedConfig $packedConfigList {\nlappend configList \"pack/$packedConfig\"\n}\n}\nreturn $configList\n}\nconffile {\nif [regexp {^pack/} $config] {\nset config [regsub {pack/} $config {}]\nLog \"Extract config $config from collection $setup(dbdir)/configPack.tar.gz\"\nset configContent [exec tar -xzOf $setup(dbdir)/configPack.tar.gz $config 2>/dev/null]\n} else {\nif [regexp [list $setup(dbdir_etc)] $config] {\nLog \"Use config file from override folder $setup(dbdir_etc)\"\nSysLog \"usb_modeswitch: use overriding config file $config; make sure this is intended\"\nSysLog \"usb_modeswitch: please report any new or corrected settings; otherwise, check for outdated files\"\n}\nset rc [open $config r]\nset configContent [read $rc]\nclose $rc\n}\nreturn $configContent\n}\n}\n}\nproc {Log} {msg} {\nglobal flags device loginit\nif {$flags(logging) == 0} {return}\nif $flags(logwrite) {\nif [string length $loginit] {\nexec echo \"\\nUSB_ModeSwitch log from [clock format [clock seconds]]\" >/var/log/usb_modeswitch_$device\nexec echo \"$loginit\" >>/var/log/usb_modeswitch_$device\nset loginit \"\"\n}\nexec echo $msg >>/var/log/usb_modeswitch_$device\n} else {\nappend loginit \"\\n$msg\"\n}\n}\nproc {SafeExit} {} {\nglobal flags\nset $flags(logwrite) 1\nLog \"\"\nexit\n}\nproc {SymLinkName} {path} {\nglobal device\nproc {hasInterrupt} {ifDir} {\nif {[llength [glob -nocomplain $ifDir/ttyUSB*]] == 0} {\nLog \"  no ttyUSB interface - skip endpoint check\"\nreturn 0\n}\nforeach epDir [glob -nocomplain $ifDir/ep_*] {\nset e [file tail $epDir]\nLog \"  check $e ...\"\nif [file exists $epDir/type] {\nset rc [open $epDir/type r]\nset type [read $rc]\nclose $rc\nif [regexp {Interrupt} $type] {\nLog \"  $e has interrupt transfer type\"\nreturn 1\n}\n}\n}\nreturn 0\n}\nset loginit \"usb_modeswitch called with --symlink-name\\n parameter: $path\\n\"\nset linkpath /sys$path/device\nif [file exists $linkpath] {\nif {[file type $linkpath] == \"link\"} {\nset rawpath [file readlink $linkpath]\nset trimpath [regsub -all {\\.\\./} $rawpath {}]\nif [file isdirectory /sys/$trimpath] {\nappend loginit \"\\n Use path $path\\n\"\nset path /$trimpath\n}\n}\n}\nif {![regexp {ttyUSB[0-9]+} $path myPort]} {\nif $flags(logging) {\nset device [clock clicks]\nLog \"$loginit\\nThis is not a ttyUSB port. Abort\"\n}\nreturn \"\"\n}\nset device $myPort\nLog \"$loginit\\nMy name is $myPort\\n\"\nif {![regexp {(.*?[0-9]+)\\.([0-9]+)/ttyUSB} /sys$path d ifRoot ifNum]} {\nLog \"Could not find interface in path\\n $path. Abort\"\nreturn \"\"\n}\nset ifDir $ifRoot.$ifNum\nLog \"Check my endpoints ...\\n in $ifDir\"\nif [hasInterrupt $ifDir] {\nLog \"\\n--> I am an interrupt port\"\nset rightPort 1\n} else {\nLog \"\\n--> I am not an interrupt port\\n\"\nset rightPort 0\n}\nif { $rightPort && ($ifNum > 0) } {\nLog \"\\nLook for lower ports with interrupt endpoints\"\nfor {set i 0} {$i < $ifNum} {incr i} {\nset ifDir $ifRoot.$i\nLog \" in ifDir $ifDir ...\"\nif [hasInterrupt $ifDir] {\nLog \"\\n--> found an interrupt interface below me\\n\"\nset rightPort 0\nbreak\n}\n}\n}\nif {$rightPort == 0} {\nLog \"Return empty name and exit\"\nreturn \"\"\n}\nLog \"\\n--> No interrupt interface below me\\n\"\ncd /dev\nset idx 2\nset symlinkName \"gsmmodem\"\nwhile {$idx < 256} {\nif {![file exists $symlinkName]} {\nset placeholder [open /dev/$symlinkName w]\nclose $placeholder\nbreak\n}\nset symlinkName gsmmodem$idx\nincr idx\n}\nif {$idx == 256} {return \"\"}\nLog \"Return symlink name \\\"$symlinkName\\\" and exit\"\nreturn $symlinkName\n}\nproc {CheckDriverBind} {vid pid} {\nglobal config\nforeach fn {/sbin/modprobe /usr/sbin/modprobe} {\nif [file exists $fn] {\nset loader $fn\n}\n}\nLog \"Module loader is $loader\"\nset idfile $config(driverIDPath)/new_id\nif {![file exists $idfile]} {\nif {$loader == \"\"} {\nLog \"Can't do anymore without module loader; get \\\"modtools\\\"!\"\nreturn\n}\nLog \"\\nTry to load module \\\"$config(driverModule)\\\"\"\nif [catch {set result [exec $loader -v $config(driverModule)]} err] {\nLog \" Running \\\"$loader $config(driverModule)\\\" gave an error:\\n  $err\"\n} else {\nLog \" Module was loaded successfully:\\n$result\"\n}\n} else {\nLog \"Module is active already\"\n}\nset i 0\nwhile {$i < 50} {\nif [file exists $idfile] {\nbreak\n}\nafter 20\nincr i\n}\nif {$i < 50} {\nLog \"Try to add ID to driver \\\"$config(driverModule)\\\"\"\nSysLog \"usb_modeswitch: add device ID $vid:$pid to driver \\\"$config(driverModule)\\\"\"\nSysLog \"usb_modeswitch: please report the device ID to the Linux USB developers!\"\nif [catch {exec echo \"$vid $pid ff\" >$idfile} err] {\nLog \" Error adding ID to driver:\\n  $err\"\n} else {\nLog \" ID added to driver; check for new devices in /dev\"\n}\n} else {\nLog \" \\\"$idfile\\\" not found, check if kernel version is at least 2.6.27\"\nLog \"Fall back to \\\"usbserial\\\"\"\nset config(driverModule) usbserial\nLog \"\\nTry to unload driver \\\"usbserial\\\"\"\nif [catch {exec $loader -r usbserial} err] {\nLog \" Running \\\"$loader -r usbserial\\\" gave an error:\\n  $err\"\nLog \"No more fallbacks\"\nreturn\n}\nafter 50\nLog \"\\nTry to load driver \\\"usbserial\\\" with device IDs\"\nif [catch {set result [exec $loader -v usbserial vendor=0x$vid product=0x$pid]} err] {\nLog \" Running \\\"$loader usbserial\\\" gave an error:\\n  $err\"\n} else {\nLog \" Driver was loaded successfully:\\n$result\"\n}\n}\n}\nproc {InBindList} {id} {\nset listfile /var/lib/usb_modeswitch/bind_list\nif {![file exists $listfile]} {return 0}\nset rc [open $listfile r]\nset buffer [read $rc]\nclose $rc\nif [string match *$id* $buffer] {\nLog \"Found $id in bind_list\"\nreturn 1\n} else {\nLog \"No $id in bind_list\"\nreturn 0\n}\n}\nproc {AddToList} {name id} {\nset listfile /var/lib/usb_modeswitch/$name\nset oldlistfile /etc/usb_modeswitch.d/bind_list\nif {($name == \"bind_list\") && [file exists $oldlistfile] && ![file exists $listfile]} {\nif [catch {file rename $oldlistfile $listfile} err] {\nLog \"Error renaming the old bind list file ($err)\"\nreturn\n}\n}\nif [file exists $listfile] {\nset rc [open $listfile r]\nset buffer [read $rc]\nclose $rc\nif [string match *$id* $buffer] {\nreturn\n}\nset idList [split [string trim $buffer] \\n]\n}\nlappend idList $id\nset buffer [join $idList \"\\n\"]\nif [catch {set lc [open $listfile w]}] {return}\nputs $lc $buffer\nclose $lc\n}\nproc {RemoveFromBindList} {id} {\nset listfile /var/lib/usb_modeswitch/bind_list\nif [file exists $listfile] {\nset rc [open $listfile r]\nset buffer [read $rc]\nclose $rc\nset idList [split [string trim $buffer] \\n]\n} else {\nreturn\n}\nset idx [lsearch $idList $id]\nif {$idx > -1} {\nset idList [lreplace $idList $idx $idx]\n} else {\nreturn\n}\nif {[llength $idList] == 0} {\nfile delete $listfile\nreturn\n}\nset buffer [join $idList \"\\n\"]\nif [catch {set lc [open $listfile w]}] {return}\nputs $lc $buffer\nclose $lc\n}\nproc {CheckSuccess} {devdir} {\nglobal config usb flags\nset ifdir [file tail [IfDir 0]]\nif {[string length $config(targetClass)] || [string length $config(Configuration)]} {\nset config(targetVendor) $usb(idVendor)\nset config(targetProduct) $usb(idProduct)\n}\nLog \"Check success of mode switch for max. $config(checkSuccess) seconds ...\"\nset expected 1\nfor {set i 1} {$i <= $config(checkSuccess)} {incr i} {\nafter 1000\nif {![file isdirectory $devdir]} {\nLog \" Wait for device file system ($i sec.) ...\"\ncontinue\n} else {\nLog \" Read attributes ...\"\n}\nset ifdir [IfDir 0]\nif {$ifdir == \"\"} {continue}\nset ifdir [file tail $ifdir]\nif {![ReadUSBAttrs $devdir $ifdir]} {\nLog \" Essential attributes are missing, continue wait ...\"\ncontinue\n}\nif [string length $config(Configuration)] {\nif {$usb(bConfigurationValue) != $config(Configuration)} {continue}\n}\nif [string length $config(targetClass)] {\nif {![regexp $usb($ifdir/bInterfaceClass) $config(targetClass)]} {\nif {$config(class) != $usb($ifdir/bInterfaceClass} {\nset expected 0\n} else {continue}\n}\n}\nif {![regexp $usb(idVendor) $config(targetVendor)]} {\nif {![regexp $usb(idVendor) $config(vendor)]} {\nset expected 0\n} else {continue}\n}\nif {![regexp $usb(idProduct) $config(targetProduct)]} {\nif {![regexp $usb(idProduct) $config(product)]} {\nset expected 0\n} else {continue}\n}\nif $expected {\nLog \" All attributes matched\"\n} else {\nif [regexp -nocase {/[0-9a-f]+:#} $flags(config)] {\nLog \" idProduct has changed after generic mode-switch, assume success\"\n} else {\nLog \" Attributes are different but target values are unexpected:\"\nLogAttributes\n}\n}\nbreak\n}\nif {$i > 20} {\nreturn 0\n}\nreturn 1\n}\nproc {IfDir} {iface} {\nglobal devdir\nset allfiles [glob -nocomplain $devdir/*]\nset files [glob -nocomplain $devdir/*.$iface]\nif {[llength $files] == 0} {\nreturn \"\"\n}\nset ifdir [lindex $files 0]\nif {![file isdirectory $ifdir]} {\nreturn \"\"\n}\nreturn $ifdir\n}\nproc {IfClass} {iface} {\nset ifdir [IfDir $iface]\nif {![file exists $ifdir/bInterfaceClass]} {\nreturn -1\n}\nset rc [open $ifdir/bInterfaceClass r]\nset c [read $rc]\nclose $rc\nreturn [string trim $c]\n}\nproc {SysLog} {msg} {\nglobal flags\nif {![info exists flags(logger)]} {\nset flags(logger) \"\"\nforeach fn {/bin/logger /usr/bin/logger} {\nif [file exists $fn] {\nset flags(logger) $fn\n}\n}\nLog \"Logger is $flags(logger)\"\n}\nif {$flags(logger) == \"\"} {\nLog \"Can't add system message, no syslog helper found\"\nreturn\n}\ncatch {exec $flags(logger) -p syslog.notice \"$msg\" 2>/dev/null}\n}\nproc {SetStorageDelay} {secs} {\nLog \"Adjust delay for USB storage devices ...\"\nset attrib /sys/module/usb_storage/parameters/delay_use\nif {![file exists $attrib]} {\nLog \"Error: could not find delay_use attribute\"\nreturn\n}\nif [catch {set ch [open $attrib r+]} err] {\nLog \"Error: could not access delay_use attribute: $err\"\nreturn\n}\nif {[read $ch] < $secs} {\nseek $ch 0 start\nputs -nonewline $ch $secs\nLog \" Delay set to $secs seconds\\n\"\n} else {\nLog \" Current value is higher than $secs. Leave it alone\\n\"\n}\nclose $ch\n}\nproc {CheckMBIM} {} {\nset kversion [exec uname -r]\nif [file exists /lib/modules/$kversion/kernel/drivers/net/usb/cdc_mbim.ko] {return 1}\nif [file exists /sys/bus/usb/drivers/cdc_mbim] {return 1}\nreturn 0\n}\nproc {LogAttributes} {} {\nglobal flags usb\nif $flags(logging) {\nset attrList {idVendor idProduct bConfigurationValue manufacturer product serial}\nforeach attr [lsort [array names usb]] {\nLog \"    [format %-26s $attr:] $usb($attr)\"\n}\n}\n}\nMain $argv $argc\n"
